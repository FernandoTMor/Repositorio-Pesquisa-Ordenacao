using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Ordenacao
{
    class Ordena
    {
        
         private static void intercala(List<int> lista, int ini, int fim)
        {
            int meio;
            int i, j;
            List<int> listaTemporaria = new List<int>();

            meio = (int)(ini + fim) / 2;

            i = ini; //indice da porcao esquerda
            j = meio; //indice da porcao direita


            while (i < meio && j < (fim - ini))
            {
                if (lista[i] < lista[j])
                {
                    listaTemporaria.Add(lista[i]); //elemento da porcao esquerda vem para o temporario
                    ++i;
                }
                else
                {
                    listaTemporaria.Add(lista[j]); //elemento da porcao direita vem para o temporario
                    ++j;
                }
            }

            if (i == meio)
            {
                while (j < (fim - ini))
                { //nao hah mais elementos na porcao esquerda
                    listaTemporaria.Add(lista[j]);
                    ++j;
                }
            }
            else
            {
                while (i < meio)
                {
                    listaTemporaria.Add(lista[i]);
                    ++i;
                }
            }
            
            for (i = ini; i < (fim - ini); ++i)
            {
                lista[i] = listaTemporaria[i];
            }

            listaTemporaria.Clear();
        }

        public static void mergeSort(List<int> lista, int ini, int fim)
        { //responsavel pela divisao = recursao
            int meio;
            
            if (fim - ini > 1)
            {
                meio = (int)(ini + fim) / 2;                

                mergeSort(lista, ini, meio); //porcao da esquerda
                mergeSort(lista, meio + 1, fim); //porcao da direita                
                intercala(lista, ini, fim);
            }
        }
        

        
    }
    }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Ordenacao
{
    class Utilidades
    {
        public static void popularLista(List<int> lista, int quantidade)
        {
            Random gerador = new Random();
            for (int i = 0; i < quantidade; i++)
            {
                lista.Add(gerador.Next(1000));
            }
        }

        public static void exibirLista(List<int> lista)
        {
            foreach (var i in lista)
            {
                Console.WriteLine(i);
            }
        }

        public static void copiarLista(List<int> origem, List<int> destino)
        {
            for (int i = 0; i < origem.Count; i++)
            {
                destino.Add(origem[i]);
            }
        }
    }
}

using Ordenacao;
using System.Diagnostics;

List<int> listaMerge = new List<int>();
List<int> listaDestino = new List<int>();


Console.Write("Quantidade n√∫meros: ");
int qtd = Int32.Parse(Console.ReadLine());

Utilidades.copiarLista(listaMerge, listaDestino);

Stopwatch sw = new Stopwatch();

sw.Start();
Ordena.mergeSort(listaDestino);
sw.Stop();
Console.WriteLine("Fim do Merge Sort (ms): " + sw.ElapsedMilliseconds);
sw.Reset();




